-- Q1 Are there any data quality issues present?
-- Users table:
-- check for missing fields:
select count(*) as missing_birth_date 
from users
where birth_date is null or birth_date='';
select count(*) as missing_state
from users
where state is null or state='';
select count(*) as missing_language
from users
where language is null or language='';
select count(*) as missing_gender
from users
where gender is null or gender='';
-- The queries above identify if and how many null values are present in the table.

-- check for inconsistent values:
select distinct language
from users;
select distinct gender
from users;
-- The queries above identify how many unique values are possible for each field to pull from the table, shed light onto any inconsistencies in the number of characters and formatting of the field values, and also identify if there are missing or null values in the data.

Transaction table:
there are duplicatie rows of data across all fields except final_quantity and final_sale - Is this done intentionally or do the final_quantity and final_sale fields need to be adjusted in some way?
purchase date and scan date are not in the same datetimestamp format
store name - inconsistencies with nomenclature - lots of mispellings
barcode - inconsistently missing some values
final_quantity - inconsistency with the data type/field format zero vs 1 vs 0.26
final_sale - some values are missing, the decimla placement is inconsistent - some are 1 decimal, 2 or none
Products table:
all fields have inconsistencies with missing values
barcode - since this is the unique identifier used to connect the transaction table, with the missing values, it is impossible to connect some records to the other table

-- Q2 Are there any fields that are challenging to understand?
Yes - The final_quantity and final_sale fields of the transaction table - rows are duplicative on the rows of data except these but it is unclear as to why and if it is intentional or a bug
Yes - If the Entity Relationship Model was not provided, it might be dificult to conclude that id in the users table was the same field as user_id in the transactions table 

-- Q3 What are the top 5 brands by receipts scanned among users 21 and over?
select p.brand, count(distinct t.receipt_id) as receipts_scanned
from trantactions t 
-- join with the products table on the the shared barcode field
left join products p on t.barcode = p.barcode
-- join with the users table on the shared id field
left join users u on t.user_id=u.id
-- filtering results to isolate users who are 21 years of age or older
where u.birth_date <= current_date - interval '21 years'
-- grouping results by brand
group by 1
-- sorting results by the most receipts to the least receipts
order by 2 desc
-- cutting off results at 5 top rows
limit 5;

-- OR a window function can be used to pull these results:
select  rank() over (order by count(distinct t.receipt_id) desc) as brand_rank, p.brand, count(distinct t.receipt_id) as receipts_scanned
from trantactions t
-- join with the products table on the the shared barcode field
left join products p on t.barcode = p.barcode
-- join with the users table on the shared id field
left join users u on t.user_id=u.id
-- filtering results to isolate users who are 21 years of age or older
where u.birth_date <= current_date - interval '21 years'
-- grouping results by brand and rank of highest to lowest # of receipts
group by 1,2
-- sorting results by the most receipts to the least receipts
order by 1 asc;

---Q4 What are the top 5 brands by sales among users that have had their account for at least six months?
--rank brands by the sum of sales
select rank() over (order by sum(final_sale_value) desc) as brand_rank, brand, sum(final_sale_value) as total_sales
from
--subquery to clean up the data in the sale value column and get rid of blank records and fixing formatting and also pull distinct receipt ids and brands
(select t.receipt_id, p.brand, max(case when t.final_sale is not null and t.final_sale <> ‘ ' then t.final_sale::numeric(7,2) else null end) as final_sale_value
from transactions t 
-- join with the products table on the the shared barcode field
left join products p on t.barcode = p.barcode
-- join with the users table on the shared id field
left join users u on t.user_id=u.id
-- filter subquery for only data from users with accounts of 6 months or older
where u.created_date <= current_date - interval '6 months'
-- grouping results by receipt id, brand and max sale value
group by 1, 2
) as sales_clean
where total_sales> 0 
-- sorting results by the most sales to the least sales
order by 1 asc
-- cutting off results at 5 top rows
limit 5;

---Q5 What is the percentage of sales in the Health & Wellness category by generation?
--pull % of Health & Wellness sales for each generation
select generation, sum(final_sales) * 1.0 / sum(final_sales) over (partition by generation) as total_sales_percent
from
--subquery to clean up the data in the sale value column and get rid of blank records and fixing formatting, pull in the Healthy & Wellness category only and also generate the specific generation groupings based off of birth dates
(select distinct t.receipt_id, case when birth_date is null then 'Unknown'
        when extract(year from u.birth_date) <= 1927 then 'Before Silent Generation'
        when extract(year from u.birth_date) between 1928 and 1945 then 'Silent Generation'
        when extract(year from u.birth_date) between 1946 and 1964 then 'Baby Boomers'
        when extract(year from u.birth_date) between 1965 and 1980 then 'Generation X'
        when extract(year from u.birth_date) between 1981 and 1996 then 'Millennials'
        when extract(year from u.birth_date) between 1997 and 2012 then  'Generation Z'
        when extract(year from u.birth_date) >= 2013 then 'Generation Alpha'
        else 'Unknown'
end as generation, category_1, max(case when t.final_sale is not null and t.final_sale <> ‘ ' then t.final_sale::numeric(12,2) else null end) as final_sales
from trantactions t 
-- join with the products table on the the shared barcode field
left join products p on t.barcode = p.barcode
-- join with the users table on the shared id field
left join users u on t.user_id=u.id
-- filtering the data to only look at Health & Wellness
where category_1 = 'Health & Wellness'
-- grouping results by receipt id, generation and max sale value
group by 1,2,3) as sales_clean
-- grouping results by generation
group by 1;

---Q6 Who are Fetch’s power users?
power users are top 10% of users by the number of uploaded receipts they have since they started their accounts

---Q7 Which is the leading brand in the Dips & Salsa category?
leading brand is group sales by brand under the cate 2 - dips and salsa and sort asc

---Q8 At what percent has Fetch grown year over year?
-- There is not enough historical transaction data provided to compare multiple years of performance against each other, but there are user records back to 2014 so I will make the assumption that in this situation, growth at Fetch is based on how many new accounts are set up and will compare the total # of new accounts in 2024 vs. 2023. To evaluate transactional growth, I would request for more historical data.
--pull rounded % YoY growth comparing 2024 to 2023
select round(total_new_users_2024 - total_new_users_2023)* 100.0 / nullif(total_new_users_2023,0),2) as yoy_growth_percentage_2024
from
--subquery to pull distinct counts of new users in 2024 and 2023
(select count(distinct case when extract(year from created_date) = 2024 then id end) as total_new_users_2024, count(distinct case when extract(year from created_date) = 2023 then id end) as total_new_users_2023
from users) as user_counts;
